import * as React from 'react';
import Box from '@mui/material/Box';
import Slider from '@mui/material/Slider';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import {useState, useEffect, useRef } from 'react'
import TextField from '@mui/material/TextField';
import { GoogleMap, PolygonF, useJsApiLoader, StandaloneSearchBox } from "@react-google-maps/api";
import { createPalette, normalize, rgbToColor } from '../../component/common/Util/visualize';
import { panelsPalette } from '../../component/common/Util/color';
import InputLabel from '@mui/material/InputLabel';
import { FormControl } from '@mui/material';
import { Marker, Polyline  } from "@react-google-maps/api";

const containerStyle = {
  height: '100vh', 
  width: '100%'
};


let geometryLibrary: google.maps.GeometryLibrary;

const calculateYearlyEnergy = (panelQuantity, panelCapacityWatts) => {
  const panelEfficiency = 0.20;
  const averageDailySolarIrradiance = 4; 

  const dailyEnergyPerPanel = panelCapacityWatts * panelEfficiency * 24 / 1000; 
  
  const totalDailyEnergy = dailyEnergyPerPanel * panelQuantity;

  const yearlyEnergy = totalDailyEnergy * 365;

  return yearlyEnergy;
};


const Map = ({}) => {
  const [center, setCenter] = React.useState({  
    "lat": 40.688386661759274,
    "lng": -73.93344666237486

  });

  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: "AIzaSyB5fF9C_VlMQmTOIrK4_bgCzwEukEHqsuE",
    libraries: ["places"],
  })
  
  const [markerLine, setMarkerLine] = useState([]);
  const [markers, setMarkers] = useState([]);
  const [places, setPlaces] = React.useState([]); 
  const [map, setMap] = React.useState(null)
  const [val, setVal] = useState(0);
  const [searchBox, setSearchBox] = React.useState(null);
  const [maxPanelCount,setMaxPanelCount] = useState(0);
  const [panelQuantity, setPanelQuantity] = React.useState(1); 

  const addMarker = (e) => {
    setMarkers([...markers, { lat: e.latLng.lat(), lng: e.latLng.lng() }]);
  };

  const onMarkerDragEnd = (index, e) => {
    const newMarkers = [...markers];
    newMarkers[index] = { lat: e.latLng.lat(), lng: e.latLng.lng() };
    setMarkers(newMarkers);
  };

  const handleDoneButtonClick = () => {
    // Assuming markers form a closed shape
    const paths = markers.map(marker => ({ lat: marker.lat, lng: marker.lng }));
    setPolygonPaths(paths);
  };

  const handleMarkerLineUpdate = (newLine) => {
    setMarkerLine(newLine);
  };

  const handlesadaButtonClick = () => {
    console.log("console of markers==========",markers);
    setMarkerLine([...markers]);
    setMarker("dummy");
    setPanel('npanel');
  };


  const handleResetButton = () => {
    setMarkers([]);
    setMarkerLine([]);
    setPolygonPaths([]);
    setPanel('');
    setMarker("");
    setMap({
      options: {
          strokeColor: 'rgba(176, 190, 197, 0.5)',
          strokeOpacity: 0.9,
          strokeWeight: 1,
          fillColor: 'rgba(176, 190, 197, 0.5)',
          fillOpacity: 0.9
      }
  });
  };

  const [buildingInsightsEndpoints, setBuildingInsightsEndpoints] = useState({
    carbonOffsetFactorKgPerMwh:0,
    maxSunshineHoursPerYear:0,
    wholeRoofStats:0
  });
  
 

  const [panelCapacityWatts, setPanelCapacityWatts] = React.useState(0); 
  const [panel, setPanel] = React.useState(''); 
  const [wattEnergy, setWattEnergy] = useState('');
  const [marker, setMarker] = useState('');
  const [yearlyEnergyDcKwh, setYearlyEnergyDcKwh] = useState(0);
  const searchBoxRef = useRef(null);
  const [selectedPanelIndices, setSelectedPanelIndices] = useState([]);
  const [buildingInsightsData, setBuildingInsightsData] = useState(null);
  const [polygonPaths, setPolygonPaths] = useState(null);


  useEffect(() => {
    const fetchData = async () => {
        try {
            const apikey = 'AIzaSyB5fF9C_VlMQmTOIrK4_bgCzwEukEHqsuE';
            const url = `https://solar.googleapis.com/v1/buildingInsights:findClosest?location.latitude=${center.lat}&location.longitude=${center.lng}&requiredQuality=HIGH&key=${apikey}`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            setBuildingInsightsData(data); 
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    if (panel) {
        fetchData(); 
    }
}, [center,panel]);

useEffect(() => {
  if (window.google && window.google.maps && window.google.maps.geometry) {
    const spherical = window.google.maps.geometry.spherical;
    geometryLibrary = window.google.maps.geometry;
    if (buildingInsightsData) {
      showSolarPotential(spherical, buildingInsightsData, markers);
    }
  }
}, [buildingInsightsData]);

useEffect(() => {
  if (buildingInsightsData) {
      const fetchData = async () => {
          try {
              // console.log("============================================",spherical);
              setTimeout(() => {
                  showSolarPotential(geometryLibrary.spherical, buildingInsightsData, markers);
              }, 100);
          } catch (error) {
              console.error('Error fetching data:', error);
          }
      };

      fetchData();
  }
}, [marker]); 

  
  const onLoad = React.useCallback(function callback(map) {
    const bounds = new window.google.maps.LatLngBounds(center);
    map.fitBounds(bounds);
    setMap(map);
  }, [center,])


  const handleInputChange = (event) => {
    setWattEnergy(event.target.value);
  };

  const handleInputBlur = (event) => {
    if (event.target.value.trim() === '') {
      setWattEnergy('');
    }
  };

  const handleInputFocus = () => {
    if (wattEnergy === '') {
      setWattEnergy('');
    }
  };
  const onSearchBoxLoad = (ref) => {
    setSearchBox(ref);
  };
  useEffect(() => {
    const calculatedYearlyEnergy = calculateYearlyEnergy(panelQuantity, wattEnergy);
    setYearlyEnergyDcKwh(calculatedYearlyEnergy);
  }, [panelQuantity, wattEnergy]);


 

  const handleButtonClick = async (index) => {

    setSelectedPanelIndices(prevIndices => {
      const newIndices = !prevIndices.includes(index) ? [...prevIndices, index] : prevIndices.filter(item => item !== index);
      return newIndices;
  });
};


const renderButtons = () => {
  const buttons = [];
  for (let i = 0; i < maxPanelCount; i++) {
      buttons.push(
          <Button
              key={i}
              onClick={() => handleButtonClick(i)}
              style={{
                  marginRight: '5px',
                  marginBottom: '5px',
                  backgroundColor: selectedPanelIndices.includes(i) ? 'orange' : 'skyblue',
              }}
          >
              Panel {i + 1}
          </Button>
      );
  }
  return buttons;
};



const onPlacesChanged = async () => {
  const newPlaces = searchBox.getPlaces();
  setPlaces(newPlaces);
  if (newPlaces.length > 0 && map) {
    const place = newPlaces[0];
    const location = {
      lat: place.geometry.location.lat(),
      lng: place.geometry.location.lng()
    };
    setCenter(location);
    setMarkers([location]);

    try {
      const apikey = 'AIzaSyB5fF9C_VlMQmTOIrK4_bgCzwEukEHqsuE';
      const url = `https://solar.googleapis.com/v1/buildingInsights:findClosest?location.latitude=${location.lat}&location.longitude=${location.lng}&requiredQuality=HIGH&key=${apikey}`;
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      setBuildingInsightsData(data);
      showSolarPotential(geometryLibrary.spherical, data, [location]);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }
};



function isPointInsidePolygon(point, polygon) {
  console.log("console of points=== point",point);
    const x = point.longitude;
    const y = point.latitude;

    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
        const xi = polygon[i].lng;
        const yi = polygon[i].lat;
        const xj = polygon[j].lng;
        const yj = polygon[j].lat;

        const intersect = ((yi > y) !== (yj > y)) &&
            (x < ((xj - xi) * (y - yi)) / (yj - yi) + xi);
        if (intersect) inside = !inside;
    }

    return inside;
}

const generatePaths = (spherical, solarPotential, panelCount, minEnergy, maxEnergy, palette, markerLine) => {
  let paths = [];
  const newOrientation = 1;
  const pitchDegree = 2;

  solarPotential.solarPanels.forEach((panel, index) => {
      const isPanelInside = isPointInsidePolygon(panel.center, panelCount);
      const isPanelIntersecting = doesPanelIntersectMarker(panel, markerLine);

      if (isPanelInside && !isPanelIntersecting) {
        const [w, h] = [solarPotential.panelWidthMeters / 2, solarPotential.panelHeightMeters / 2];
          const points = [
              { x: +w, y: +h }, // top right
              { x: +w, y: -h }, // bottom right
              { x: -w, y: -h }, // bottom left
              { x: -w, y: +h }, // top left
              { x: +w, y: +h }, // top right
          ];
          const orientation = newOrientation; 
          const azimuth = solarPotential.roofSegmentStats[0].azimuthDegrees;
          const colorIndex = Math.round(normalize(panel.yearlyEnergyDcKwh, maxEnergy, minEnergy) * 280);

          paths.push(
              <PolygonF
                  key={index}
                  path={points.map(({ x, y }) =>
                      spherical.computeOffset(
                          { lat: panel.center.latitude, lng: panel.center.longitude },
                          Math.sqrt(x * x + y * y),
                          Math.atan2(y, x) * (180 / Math.PI) + orientation + azimuth + pitchDegree,
                      ),
                  )}
                  options={{
                      strokeColor: '#B0BEC5',
                      strokeOpacity: 0.9,
                      strokeWeight: 1,
                      fillColor: palette[colorIndex],
                      fillOpacity: 0.9
                  }}
              />
          );
      }
  });
  return paths;
};


const doesPanelIntersectMarker = (panel, markerLine) => {
  console.log('hekkkkkkkkkk', markerLine)
  if (markerLine && markerLine.length) {
      for (let i = 0; i < panel.points.length; i++) {
          if (isPointInsidePolygon(panel.points[i], markerLine)) {
              return true; 
          }
      }

      for (let i = 0; i < markerLine.length - 1; i++) {
          for (let j = 0; j < panel.points.length; j++) {
              if (doLineSegmentsIntersect(panel.points[j], panel.points[(j + 1) % panel.points.length], markerLine[i], markerLine[i + 1])) {
                  return true;               
              }
          }
      }
      return false; 
  } else {
      console.error("Marker line is undefined or does not have a length property");
      return false; 
  }
};


const doLineSegmentsIntersect = (p1, p2, p3, p4) => {
  const d1 = orientation(p3, p4, p1);
  const d2 = orientation(p3, p4, p2);
  const d3 = orientation(p1, p2, p3);
  const d4 = orientation(p1, p2, p4);

  if (((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) && ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) {
      return true;
  } else if (d1 === 0 && isPointOnSegment(p3, p4, p1)) {
      return true;
  } else if (d2 === 0 && isPointOnSegment(p3, p4, p2)) {
      return true;
  } else if (d3 === 0 && isPointOnSegment(p1, p2, p3)) {
      return true;
  } else if (d4 === 0 && isPointOnSegment(p1, p2, p4)) {
      return true;
  }
  return false;
};

const orientation = (p, q, r) => {
  const val = (q.latitude - p.latitude) * (r.longitude - q.longitude) -
      (q.longitude - p.longitude) * (r.latitude - q.latitude);
  if (val === 0) {
      return 0;
  }
  return (val > 0) ? 1 : -1;
};

const isPointOnSegment = (p, q, r) => {
  if (q.latitude <= Math.max(p.latitude, r.latitude) &&
      q.latitude >= Math.min(p.latitude, r.latitude) &&
      q.longitude <= Math.max(p.longitude, r.longitude) &&
      q.longitude >= Math.min(p.longitude, r.longitude)) {
      return true;
  }
  return false;
};



  const showSolarPotential = (spherical, buildingInsights, panelCount) => {
    console.log("hlo",panelCount)
    const solarPotential = buildingInsights.solarPotential;
    const palette = createPalette(panelsPalette, 256).map(rgbToColor);
    const minEnergy = solarPotential.solarPanels.slice(-1)[0].yearlyEnergyDcKwh;
    const maxEnergy = solarPotential.solarPanels[0].yearlyEnergyDcKwh;
    setMaxPanelCount(solarPotential.maxArrayPanelsCount);
    setPanelQuantity(solarPotential.maxArrayPanelsCount);
    setBuildingInsightsEndpoints(prev => ({
        ...prev,
        carbonOffsetFactorKgPerMwh: solarPotential.carbonOffsetFactorKgPerMwh,
        maxSunshineHoursPerYear: solarPotential.maxSunshineHoursPerYear,
        wholeRoofStats: solarPotential.wholeRoofStats.areaMeters2
    }));

    const paths = generatePaths(spherical, solarPotential, panelCount,minEnergy,maxEnergy,palette);
    setMap({
        paths,
        options: {
            strokeColor: '#B0BEC5',
            strokeOpacity: 0.9,
            strokeWeight: 1,
            fillColor: palette[0],
            fillOpacity: 0.9
        }
    });
  };


  return (
    <div style={{ display: 'flex', position: 'relative', height: '100vh', backgroundColor: '#fff' }}>
      <div style={{ flex: 1, zIndex: 0 }}>
        {!isLoaded ? (
          <h1>Loading...</h1>
        ) : (
          <>
            <Button style={{ width: '100px', height: '100px' }} onClick={handleDoneButtonClick}>Done</Button>
            {/* <Button style={{ width: '100px', height: '100px', marginLeft: '10px' }} onClick={handleResetButtonClick}>Reset</Button> */}
            <Button style={{width:'100px',height:'100px'}} onClick={handlesadaButtonClick}>Get Panels</Button>
            <Button style={{width:'100px',height:'100px'}} onClick={handleResetButton}>Reset Button</Button>
            <GoogleMap
              mapContainerStyle={{ height: '100%', width: '100%' }}
              center={center}
              mapTypeId="satellite"
              tilt={0}
              onLoad={onLoad}
              onClick={addMarker}
              compassEnabled={true}
            >
              {/* <Marker position={center}/> */}

              <StandaloneSearchBox
                onLoad={onSearchBoxLoad}
                onPlacesChanged={onPlacesChanged}
              >
                <input
                  type="text"
                  placeholder="Search places..."
                  style={{
                    boxSizing: `border-box`,
                    border: `1px solid transparent`,
                    width: `240px`,
                    height: `32px`,
                    padding: `0 12px`,
                    borderRadius: `3px`,
                    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,
                    fontSize: `14px`,
                    outline: `none`,
                    textOverflow: `ellipses`,
                    position: "absolute",
                    left: "80%",
                    top: '20px',
                    marginLeft: "-150px",
                    zIndex: 1
                  }}
                />
              </StandaloneSearchBox>
              {markers.length > 0 && markers.map((marker, index) => (
                <Marker
                  key={index}
                  position={marker}
                  draggable={true}
                  onDragEnd={(e) => onMarkerDragEnd(index, e)}
                />
              ))}
              {markerLine && markerLine.length > 0 && (
                <PolygonF
                  path={markerLine}
                  options={{
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: 'red',
                    fillOpacity: 0.35
                  }}
                />
              )}
              {polygonPaths && (
                <PolygonF
                  path={polygonPaths}
                  options={{
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: 'red',
                    fillOpacity: 0.35
                  }}
                />
              )}
              {markers.length >= 2 && (
                <Polyline
                  path={markers}
                  options={{
                    strokeColor: "#FF0000",
                    strokeOpacity: 1.0,
                    strokeWeight: 2,
                  }}
                />
              )}
              {map && map.paths ? map.paths.map(ele => ele) : null}
            </GoogleMap>
          </>
        )}
      </div>
    </div>
  );
}
export default Map;  